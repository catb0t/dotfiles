#!/bin/bash

shopt -s nullglob

export SLUG
CS50_SLUG=cs50/2017/ap

CS50_OPT_LIBS="-lm -lcs50"
export CS50_OPT_LIBS
CS50_OPT_TESTLIB="-lcriterion"
export CS50_OPT_TESTLIB
CS50_OPT_COMMON="-std=c11 -Wall -Wextra -Wfloat-equal -Winline -Wundef -Werror -fverbose-asm -Wint-to-pointer-cast -Wshadow -Wpointer-arith -Wcast-align  -Wcast-qual -Wunreachable-code -Wstrict-overflow=5 -Wwrite-strings -Wconversion --pedantic-errors -ggdb3 -Wredundant-decls"
export CS50_OPT_COMMON
CS50_OPT_GCC="-Wsuggest-attribute=pure -Wsuggest-attribute=const -Wsuggest-attribute=noreturn"
export CS50_OPT_GCC
CS50_OPT_GCCMEM="-fstack-protector -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer -static-libasan -static-libtsan -static-liblsan -static-libubsan -lasan -lubsan"
export CS50_OPT_GCCMEM

mkdir -p "/home/$USER/projects/$CS50_SLUG"

cs50-check () (
  set -e
  cs50-format
  cs50-compile-gcc
  cs50-compile-llvm
  set -x
  local bn
  bn=$(basename $PWD)
  check50 "$CS50_SLUG/$bn$([[ $bn = "mario" ]] && echo "/more")"
  set +ex
)

cs50-submit () (
  set -e
  cs50-check
  set -x
  bn=$(basename $PWD)
  yes | submit50 "$CS50_SLUG/$bn$([[ $bn = "mario" ]] && echo "/more")"
  set +ex
)

cs50-format () (
  set -ex
  local arg bn tmp_common tmp_c tmp_h
  arg="$1"
  bn="$(basename $PWD)"
  tmp_common="$(sed -r 's/^#pragma once$|(.+)\(typeof\([a-z_A-Z0-9*]+\)\)(.+)/\1\2/gm' ../common.h)"
  tmp_c="$( ([[ -z $arg ]] && tail +2 "my_$bn.c") || echo )"
  tmp_h="$(awk '/^#include *<cs50.+$/ { print; } /^#define.*$/ { print; }/^\s*[^#].*$/ { print; }' "my_$bn.h")"
  echo "$tmp_common
$tmp_h
$tmp_c" | \
    astyle --ascii --add-braces --break-one-line-headers \
    --align-pointer=name --pad-comma --pad-header --pad-oper \
    --max-code-length=100 --convert-tabs --indent=spaces=4 \
    --indent-continuation=1 --indent-switches --lineend=linux \
    --min-conditional-indent=1 --style=allman > "$bn.c"
  set +ex
)

cs50-compile-gcc_debug () (
  set -e
  cs50-format
  set -x
  local bn
  bn="$(basename $PWD)"
  gcc "$bn.c" -o "bin/debug_$bn" $CS50_OPT_COMMON $CS50_OPT_GCC $CS50_OPT_GCCMEM $CS50_OPT_LIBS
  set +ex
)

cs50-compile-gcc () (
  set -e
  cs50-format
  set -x
  local bn
  bn="$(basename $PWD)"
  gcc "$bn.c" -o "bin/$bn" $CS50_OPT_COMMON $CS50_OPT_GCC $CS50_OPT_LIBS
  set +ex
)

cs50-compile-llvm () (
  set -e
  cs50-format
  set -x
  local bn
  bn="$(basename $PWD)"
  clang "$bn.c" -o "bin/clang_$bn" $CS50_OPT_COMMON $CS50_OPT_LIBS
  set +ex
)

cs50-clean () (
  set -ex
  command rm */*.o *.o bin/* "$(basename $PWD).c"
  set +ex
)


cs50-init () (
  set -ex
  (
    mkdir "/home/$USER/projects/$CS50_SLUG/$1/bin" -p
    echo "#include \"my_$1.h\"

int main (void) {

  return EXIT_SUCCESS;
}
" > "/home/$USER/projects/$CS50_SLUG/$1/my_$1.c"

    echo "#include <cs50.h>
#include \"/home/$USER/projects/$CS50_SLUG/common.h\"

void $1 (void);
" > "/home/$USER/projects/$CS50_SLUG/$1/my_$1.h"

    echo "#include <criterion/criterion.h>
#include \"my_$1.h\"

Test(something, main) {
  cr_assert( true );
}
" > "/home/$USER/projects/$CS50_SLUG/$1/my_test_$1.c"
  )
  set +ex
)

cs50-test () (
  set -e
  cs50-compile-gcc
  cs50-compile-llvm
  cs50-format test
  set -x
  local bn
  bn="$(basename $PWD)"
  gcc "my_test_$bn.c" -o "bin/test_$bn" $CS50_OPT_COMMON -std=gnu11 $CS50_OPT_GCC $CS50_OPT_TESTLIB $CS50_OPT_LIBS
  "bin/test_$bn"
  set +ex
)

cs50-run-gcc () (
  echo -e "\ndoing gcc"
  set -e
  cs50-compile-gcc
  set -x
  "bin/$(basename $PWD)"
  set +ex
)

cs50-run-llvm () (
  echo -e "\ndoing clang"
  set -e
  cs50-compile-llvm
  set -x
  "bin/clang_$(basename $PWD)"
  set +ex
)

cs50-run-gcc_debug () (
  echo -e "\ndoing asan"
  set -e
  cs50-compile-gcc_debug
  set -x
  "bin/debug_$(basename $PWD)"
  set +ex
)

cs50-run-gcc_mc () (
  echo -e "\ndoing gcc+vl"
  set -e
  cs50-compile-gcc
  set -x
  vl --leak-check=full "bin/$(basename $PWD)"
  set +ex
)

cs50-run-llvm_mc () (
  echo -e "\ndoing gcc+vl"
  set -e
  cs50-compile-llvm
  set -x
  vl --leak-check=full "bin/clang_$(basename $PWD)"
  set +ex
)

cs50-runall () (
  echo -e "\ndoing all"
  set -e
  cs50-format
  cs50-compile-gcc
  cs50-compile-gcc_debug
  cs50-compile-llvm
  cs50-format test
  cs50-test
  set -x
  local bn
  bn=$(basename $PWD)
  # "bin/$bn"
  # "bin/debug_$bn"
  set +ex
  clw
)

cs50 () {
  echo -e "$@" "$#"
  local arg1 arg2
  arg1=$1
  arg2=$2
  shift
  shift
  cs50-$arg1${arg2:-} "$@"
}
